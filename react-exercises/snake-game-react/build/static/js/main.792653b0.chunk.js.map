{"version":3,"sources":["components/cell/cell.component.jsx","components/row/row.component.jsx","components/game-board/game-board.component.jsx","state-management/initialState.js","state-management/reducer.js","state-management/store.js","game-mechanics/game-board.utility.js","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","cellData","className","class","Row","rowData","map","cell","index","key","GameBoard","boardMatrix","row","initialState","boardSize","borderData","reducer","state","action","type","payload","StateContext","createContext","StateProvider","children","useReducer","dispatch","Provider","value","generateBorder","i","j","push","generateCellData","classCSS","HomePage","useContext","console","log","useEffect","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.792653b0.chunk.js","sourcesContent":["import React from 'react';\nimport './cell.styles.css';\n\nconst Cell = ({ cellData }) => <div className={cellData.class}></div>;\n\nexport default Cell;\n","import React from 'react';\nimport Cell from '../cell/cell.component';\nimport './row.styles.css';\n\nconst Row = ({ rowData }) => (\n  <div className=\"row\">\n    {rowData.map((cell, index) => (\n      <Cell key={index} cellData={cell} />\n    ))}\n  </div>\n);\n\nexport default Row;\n","import React from 'react';\nimport Row from '../row/row.component';\nimport './game-board.styles.css';\n\nconst GameBoard = ({ boardMatrix }) => (\n  <div className=\"game-board\">\n    {boardMatrix.map((row, index) => (\n      <Row key={index} rowData={row} />\n    ))}\n  </div>\n);\n\nexport default GameBoard;\n","export const initialState = {\n  boardSize: [30, 30],\n  borderData: [],\n  boardMatrix: [],\n};\n","export const reducer = (state, action) => {\n  const type = action.type;\n  const payload = action.payload;\n\n  switch (type) {\n    case 'generateBorderData':\n      return {\n        ...state,\n        borderData: payload,\n      };\n    case 'initializeGame':\n      return {\n        ...state,\n        boardMatrix: payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import React, { useContext, createContext, useReducer } from 'react';\nimport { initialState } from './initialState';\nimport { reducer } from './reducer';\n\nconst StateContext = createContext(initialState);\n\nconst StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return <StateContext.Provider value={{ state, dispatch }}>{children}</StateContext.Provider>;\n};\n\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst getState = () => useContext(StateContext);\n// useContext is equivalent to StateContext.Consumer.\n\nexport { StateContext, StateProvider, getState };\n","const generateBorder = (boardSize) => {\n  const borderData = [];\n  for (let i = 0; i < boardSize[0]; i++) {\n    for (let j = 0; j < boardSize[1]; j++) {\n      // don't mark corner cell as border for snake\n      if (\n        (i === 0 && (j === 0 || j === boardSize[1] - 1)) ||\n        (i === boardSize[0] - 1 && (j === 0 || j === boardSize[1] - 1))\n      ) {\n        borderData.push([i, j, 'corner']);\n        continue;\n      }\n\n      if (i === 0) {\n        borderData.push([i, j, 'border-top']);\n      }\n      if (i === boardSize[0] - 1) {\n        borderData.push([i, j, 'border-bottom']);\n      }\n\n      if (j === 0) {\n        borderData.push([i, j, 'border-left']);\n      }\n      if (j === boardSize[1] - 1) {\n        borderData.push([i, j, 'border-right']);\n      }\n    }\n  }\n\n  return borderData;\n};\n\nconst generateCellData = (boardSize, borderData) => {\n  const cellData = [];\n  for (let i = 0; i < boardSize[0]; i++) {\n    cellData[i] = [];\n    for (let j = 0; j < boardSize[1]; j++) {\n      cellData[i][j] = { type: 'cell', class: 'cell' };\n    }\n  }\n\n  borderData.map(([i, j, classCSS]) => {\n    cellData[i][j].class += ` ${classCSS}`;\n  });\n\n  return cellData;\n};\n\nexport { generateBorder, generateCellData };\n","import React, { useEffect } from 'react';\nimport GameBoard from '../../components/game-board/game-board.component';\nimport { getState } from '../../state-management/store';\nimport { generateBorder, generateCellData } from '../../game-mechanics/game-board.utility';\nimport './homepage.styles.css';\n\nconst HomePage = () => {\n  const { state, dispatch } = getState();\n  console.log(state);\n  const boardSize = state.boardSize;\n  const borderData = state.borderData;\n\n  useEffect(() => {\n    dispatch({\n      type: 'generateBorderData',\n      payload: generateBorder(boardSize),\n    });\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    dispatch({\n      type: 'initializeGame',\n      payload: generateCellData(boardSize, state.borderData),\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, borderData, boardSize]);\n\n  return (\n    <div className=\" wrapper\">\n      <header className=\"header\">\n        <h1 className=\"page-title\">Snake Game</h1>\n      </header>\n      <div className=\"score-text\">Score: 23</div>\n      <GameBoard boardMatrix={state.boardMatrix} />\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport HomePage from './pages/homepage/homepage.component';\nimport { StateProvider } from './state-management/store';\nimport './App.css';\n\nfunction App() {\n  return (\n    <StateProvider>\n      <div className=\"App\">\n        <HomePage />\n      </div>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}