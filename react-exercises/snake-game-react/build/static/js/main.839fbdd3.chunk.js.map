{"version":3,"sources":["components/cell/cell.component.jsx","components/row/row.component.jsx","components/custom-button/custom-button.component.jsx","game-mechanics/game-board.utility.js","state-management/initialState.js","state-management/reducer.js","state-management/store.js","components/board-overlay/board-overlay.component.jsx","components/game-board/game-board.component.jsx","components/game-controller/game-controller.component.jsx","components/custom-hooks/useInterval.hook.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Cell","cellData","className","class","type","Row","rowData","map","cell","index","key","CustomButton","children","onClickCallback","props","btnClass","onClick","event","setSnakePosition","snakeData","boardMatrix","head","i","j","body","updateSnakePosition","state","cleanOldSnakePosition","oldSnakeData","snakeDirection","newSnakeData","unshift","pop","initialState","status","highScore","score","boardSize","borderData","snakeFood","snakeSpeed","generateCellData","push","generateBorder","classCSS","markBorder","setFoodPosition","reducer","action","payload","StateContext","createContext","StateProvider","useReducer","dispatch","Provider","value","getState","useContext","BoardOverlay","console","log","GameBoard","row","GameController","KeyCodes","useEffect","window","onkeydown","handleKeyDown","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","onLeftButtonPress","onUpButtonPress","onDownButtonPress","onRightButtonPress","keyCode","HomePage","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.839fbdd3.chunk.js","sourcesContent":["import React from 'react';\nimport './cell.styles.css';\n\nconst Cell = ({ cellData }) => <div className={`${cellData.class} ${cellData.type}`}></div>;\n\nexport default Cell;\n","import React from 'react';\nimport Cell from '../cell/cell.component';\nimport './row.styles.css';\n\nconst Row = ({ rowData }) => (\n  <div className=\"row\">\n    {rowData.map((cell, index) => (\n      <Cell key={index} cellData={cell} />\n    ))}\n  </div>\n);\n\nexport default Row;\n","import React from 'react';\nimport './custom-button.styles.css';\n\nconst CustomButton = ({ children, onClickCallback, ...props }) => (\n  <button className={`btn ${props.btnClass}`} onClick={(event) => onClickCallback(event)}>\n    {children}\n  </button>\n);\n\nexport default CustomButton;\n","const generateCellData = (boardSize) => {\n  const cellData = [];\n  for (let i = 0; i < boardSize[0]; i++) {\n    cellData[i] = [];\n    for (let j = 0; j < boardSize[1]; j++) {\n      cellData[i][j] = { type: 'cell', class: 'cell' };\n    }\n  }\n  return cellData;\n};\n\nconst generateBorder = (boardSize) => {\n  const borderData = [];\n  for (let i = 0; i < boardSize[0]; i++) {\n    for (let j = 0; j < boardSize[1]; j++) {\n      // don't mark corner cell as border for snake\n      if (\n        (i === 0 && (j === 0 || j === boardSize[1] - 1)) ||\n        (i === boardSize[0] - 1 && (j === 0 || j === boardSize[1] - 1))\n      ) {\n        borderData.push([i, j, 'corner']);\n        continue;\n      }\n\n      if (i === 0) {\n        borderData.push([i, j, 'border-top']);\n      }\n      if (i === boardSize[0] - 1) {\n        borderData.push([i, j, 'border-bottom']);\n      }\n\n      if (j === 0) {\n        borderData.push([i, j, 'border-left']);\n      }\n      if (j === boardSize[1] - 1) {\n        borderData.push([i, j, 'border-right']);\n      }\n    }\n  }\n\n  return borderData;\n};\n\nconst markBorder = (borderData, [...boardMatrix]) => {\n  //eslint-disable-next-line array-callback-return\n  borderData.map(([i, j, classCSS]) => {\n    boardMatrix[i][j].class += ` ${classCSS}`;\n  });\n\n  return boardMatrix;\n};\n\nconst setFoodPosition = (snakeFood, [...boardMatrix]) => {\n  //eslint-disable-next-line array-callback-return\n  snakeFood.map(([i, j]) => {\n    boardMatrix[i][j].type = `snake-food`;\n  });\n\n  return boardMatrix;\n};\n\nconst setSnakePosition = (snakeData, [...boardMatrix]) => {\n  let [i, j] = snakeData.head;\n  boardMatrix[i][j].type = `snake-head`;\n\n  // eslint-disable-next-line array-callback-return\n  snakeData.body.map(([i, j]) => {\n    boardMatrix[i][j].type = `snake-body`;\n  });\n\n  return boardMatrix;\n};\n\nconst cleanOldSnakePosition = (snakeData, [...boardMatrix]) => {\n  let [i, j] = snakeData.head;\n  boardMatrix[i][j].type = `cell`;\n\n  // eslint-disable-next-line array-callback-return\n  snakeData.body.map(([i, j]) => {\n    boardMatrix[i][j].type = `cell`;\n  });\n\n  return boardMatrix;\n};\n\nconst newSnakePositionData = (oldSnakeData, snakeDirection) => {\n  oldSnakeData.body.unshift([...oldSnakeData.head]);\n  oldSnakeData.body.pop();\n\n  if (snakeDirection === 'left') {\n    oldSnakeData.head[1] -= 1;\n  }\n  if (snakeDirection === 'right') {\n    oldSnakeData.head[1] += 1;\n  }\n  if (snakeDirection === 'up') {\n    oldSnakeData.head[0] -= 1;\n  }\n  if (snakeDirection === 'down') {\n    oldSnakeData.head[0] += 1;\n  }\n\n  return { ...oldSnakeData };\n};\n\nconst updateSnakePosition = ({ ...state }) => {\n  state.boardMatrix = cleanOldSnakePosition(state.snakeData, state.boardMatrix);\n  const newSnakeData = newSnakePositionData(state.snakeData, state.snakeDirection);\n  const newBoardMatrix = setSnakePosition(newSnakeData, state.boardMatrix);\n\n  return { snakeData: newSnakeData, boardMatrix: newBoardMatrix };\n};\n\nconst updateFoodPosition = (snakeData, [...cellData]) => {};\n\nexport {\n  generateBorder,\n  generateCellData,\n  markBorder,\n  updateFoodPosition,\n  updateSnakePosition,\n  setFoodPosition,\n  setSnakePosition,\n};\n","import {\n  generateCellData,\n  generateBorder,\n  markBorder,\n  setFoodPosition,\n  setSnakePosition,\n} from '../game-mechanics/game-board.utility';\n\n// status can be either of these [not-started, playing, game-over]\n// snakeDirection can be either of these [up, down, left, right]\nconst initialState = {\n  status: 'not-started',\n  highScore: 0,\n  score: 0,\n  boardSize: [25, 25],\n  borderData: [],\n  boardMatrix: [],\n  snakeData: {\n    head: [7, 5],\n    body: [\n      [6, 5],\n      [5, 5],\n      [4, 5],\n      [3, 5],\n    ],\n  },\n  snakeDirection: 'down',\n  snakeFood: [[10, 7]],\n  snakeSpeed: 1,\n};\n\ninitialState.boardMatrix = generateCellData(initialState.boardSize);\ninitialState.borderData = generateBorder(initialState.boardSize);\ninitialState.boardMatrix = markBorder(initialState.borderData, initialState.boardMatrix);\ninitialState.boardMatrix = setFoodPosition(initialState.snakeFood, initialState.boardMatrix);\ninitialState.boardMatrix = setSnakePosition(initialState.snakeData, initialState.boardMatrix);\n\nexport { initialState };\n","export const reducer = (state, action) => {\n  const type = action.type;\n  const payload = action.payload;\n\n  switch (type) {\n    case 'start-game':\n      return {\n        ...state,\n        status: 'playing',\n      };\n    case 'restart-game':\n      return {\n        ...state,\n        status: 'playing',\n      };\n    case 'move-snake':\n      return {\n        ...state,\n        snakeData: payload.snakeData,\n        boardMatrix: payload.boardMatrix,\n      };\n    case 'set-snake-direction':\n      return {\n        ...state,\n        snakeDirection: payload,\n      };\n\n    default:\n      return state;\n  }\n};\n","import React, { useContext, createContext, useReducer } from 'react';\nimport { initialState } from './initialState';\nimport { reducer } from './reducer';\n\nconst StateContext = createContext(initialState);\n\nconst StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return <StateContext.Provider value={{ state, dispatch }}>{children}</StateContext.Provider>;\n};\n\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst getState = () => useContext(StateContext);\n// useContext is equivalent to StateContext.Consumer.\n\nexport { StateContext, StateProvider, getState };\n","import React from 'react';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { getState } from '../../state-management/store';\nimport './board-overlay.styles.css';\n\nconst BoardOverlay = () => {\n  const { state, dispatch } = getState();\n  const onClickGameStartButton = () => {\n    console.log('start btn clicked');\n    dispatch({\n      type: 'start-game',\n    });\n  };\n\n  const onClickGameRestartButton = () => {\n    console.log('restart btn clicked');\n    dispatch({\n      type: 'restart-game',\n    });\n  };\n\n  return (\n    <>\n      {state.status !== 'playing' ? (\n        <div className=\"board-overlay\">\n          {state.status === 'not-started' ? (\n            <div className=\"start-overlay-content\">\n              <div className=\"start-oc-text\">Start Game</div>\n              <CustomButton\n                btnClass={'btn-start btn-circle'}\n                onClickCallback={onClickGameStartButton}\n              >\n                START\n              </CustomButton>\n            </div>\n          ) : (\n            ''\n          )}\n\n          {state.status === 'game-over' ? (\n            <div className=\"restart-overlay-content\">\n              <div className=\"restart-oc-text\">Game Over!</div>\n\n              <CustomButton\n                btnClass={'btn-restart btn-circle'}\n                onClickCallback={onClickGameRestartButton}\n              >\n                RESTART\n              </CustomButton>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n      ) : (\n        ''\n      )}\n    </>\n  );\n};\n\nexport default BoardOverlay;\n","import React from 'react';\nimport Row from '../row/row.component';\nimport BoardOverlay from '../board-overlay/board-overlay.component';\n\nimport './game-board.styles.css';\n\nconst GameBoard = ({ boardMatrix }) => {\n  return (\n    <div className=\"game-board\">\n      {boardMatrix.map((row, index) => (\n        <Row key={index} rowData={row} />\n      ))}\n      <BoardOverlay />\n    </div>\n  );\n};\n\nexport default GameBoard;\n","import React, { useEffect } from 'react';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { useInterval } from '../custom-hooks/useInterval.hook';\nimport { getState } from '../../state-management/store';\nimport { updateSnakePosition } from '../../game-mechanics/game-board.utility';\nimport './game-controller.styles.css';\n\nconst GameController = () => {\n  const { state, dispatch } = getState();\n  const KeyCodes = { LEFT: 37, UP: 38, RIGHT: 39, DOWN: 40 };\n  const delay = 200;\n\n  useEffect(() => {\n    window.onkeydown = handleKeyDown;\n  });\n\n  useInterval(\n    () => {\n      console.log('hello');\n      // console.log(updateSnakePosition(state));\n      dispatch({\n        type: 'move-snake',\n        payload: updateSnakePosition(state),\n      });\n    },\n    state.status === 'playing' ? delay - state.snakeSpeed : null\n  );\n\n  const onLeftButtonPress = () => {\n    if (state.snakeDirection === 'right') {\n      return;\n    }\n    dispatch({\n      type: 'set-snake-direction',\n      payload: 'left',\n    });\n  };\n  const onUpButtonPress = () => {\n    if (state.snakeDirection === 'down') {\n      return;\n    }\n    dispatch({\n      type: 'set-snake-direction',\n      payload: 'up',\n    });\n  };\n\n  const onDownButtonPress = () => {\n    if (state.snakeDirection === 'up') {\n      return;\n    }\n    dispatch({\n      type: 'set-snake-direction',\n      payload: 'down',\n    });\n  };\n\n  const onRightButtonPress = () => {\n    if (state.snakeDirection === 'left') {\n      return;\n    }\n    dispatch({\n      type: 'set-snake-direction',\n      payload: 'right',\n    });\n  };\n\n  const handleKeyDown = (event) => {\n    switch (event.keyCode) {\n      case KeyCodes.LEFT:\n        onLeftButtonPress();\n        break;\n      case KeyCodes.UP:\n        onUpButtonPress();\n        break;\n      case KeyCodes.RIGHT:\n        onRightButtonPress();\n        break;\n      case KeyCodes.DOWN:\n        onDownButtonPress();\n        break;\n      default:\n    }\n  };\n\n  return (\n    <div className=\"mobile-controls\">\n      <CustomButton btnClass={'btn-game-control'} onClickCallback={onLeftButtonPress}>\n        &#x2B05;\n      </CustomButton>\n      <CustomButton btnClass={'btn-game-control'} onClickCallback={onUpButtonPress}>\n        &#x2B06;\n      </CustomButton>\n      <CustomButton btnClass={'btn-game-control'} onClickCallback={onDownButtonPress}>\n        &#x2B07;\n      </CustomButton>\n      <CustomButton btnClass={'btn-game-control'} onClickCallback={onRightButtonPress}>\n        &#x27A1;\n      </CustomButton>\n    </div>\n  );\n};\n\nexport default GameController;\n","import { useEffect, useRef } from 'react';\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n\nexport { useInterval };\n","import React from 'react';\nimport GameBoard from '../../components/game-board/game-board.component';\nimport GameController from '../../components/game-controller/game-controller.component';\nimport { getState } from '../../state-management/store';\n\nimport './homepage.styles.css';\n\nconst HomePage = () => {\n  const { state } = getState();\n  console.log(state);\n\n  return (\n    <div className=\" wrapper\">\n      <header className=\"header\">\n        <h1 className=\"page-title\">Snake Game</h1>\n      </header>\n      <div className=\"scoreboard\">\n        <div className=\"score-text\">Score: {state.score}</div>\n        <div className=\"score-text\">High Score: {state.highScore}</div>\n      </div>\n\n      <GameBoard boardMatrix={state.boardMatrix} />\n      <GameController />\n      <div className=\"instruction-text\">Tip: Use arrow buttons to control snake.</div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport HomePage from './pages/homepage/homepage.component';\nimport { StateProvider } from './state-management/store';\nimport './App.css';\n\nfunction App() {\n  return (\n    <StateProvider>\n      <div className=\"App\">\n        <HomePage />\n      </div>\n    </StateProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}