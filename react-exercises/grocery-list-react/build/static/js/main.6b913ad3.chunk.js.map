{"version":3,"sources":["components/custom-button/custom-button.component.jsx","components/grocery-item/grocery-item.component.jsx","components/grocery-items-container/grocery-items-container.component.jsx","components/custom-input-field/custom-input-field.component.jsx","components/add-new-item-container/add-new-item-container.component.jsx","pages/homepage/homepage.component.jsx","App.js","serviceWorker.js","index.js"],"names":["CustomButton","children","onClickCallback","itemID","props","className","btnClass","btnClassDisabled","data-item-id","onClick","event","disabled","isDisabled","GroceryItem","id","name","quantity","handleIncrementItemBtnClick","handleDecrementItemBtnClick","togglePurchaseCallback","purchased","GroceryItemsContainer","groceryItems","onClickTogglePurchaseStatus","map","item","key","CustomInputField","onChangeCallback","type","placeholder","value","inputFieldValue","onChange","target","AddNewItemContainer","handleAddItemBtnClick","onChangeItemInputField","style","display","HomePage","state","newItem","bind","addItem","clearAllItems","increaseQuantity","decreaseQuantity","togglePurchaseStatus","Math","random","toString","substr","console","log","currentItems","this","newItemName","newItemQuantity","some","toLowerCase","forEach","push","generateID","setState","getAttribute","removeItem","filter","inputText","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6b913ad3.chunk.js","sourcesContent":["import React from 'react';\nimport './custom-button.styles.css';\n\nconst CustomButton = ({ children, onClickCallback, itemID, ...props }) => (\n  <button\n    className={`btn ${props.btnClass} ${props.btnClassDisabled}`}\n    data-item-id={itemID}\n    onClick={event => onClickCallback(event)}\n    disabled={props.isDisabled}\n  >\n    {children}\n  </button>\n);\n\nexport default CustomButton;\n","import React from 'react';\nimport CustomButton from '../custom-button/custom-button.component';\nimport './grocery-item.styles.css';\n\nconst GroceryItem = ({\n  id,\n  name,\n  quantity,\n  handleIncrementItemBtnClick,\n  handleDecrementItemBtnClick,\n  togglePurchaseCallback,\n  purchased\n}) => (\n  <li className=\"item-container\">\n    <div>\n      <span\n        className=\"item-name\"\n        data-item-id={id}\n        onClick={event => togglePurchaseCallback(event)}\n      >\n        {name}\n      </span>\n      {purchased ? (\n        <span className={`quantity-badge badge-danger`}>{`Purchased`}</span>\n      ) : (\n        <span className={`quantity-badge badge-success`}>{`x${quantity}`}</span>\n      )}\n    </div>\n    <div>\n      <CustomButton\n        btnClass={'btn-secondary btn-circle increase-decrease-btn'}\n        onClickCallback={handleIncrementItemBtnClick}\n        itemID={id}\n        btnClassDisabled={purchased ? 'btn-disabled' : ''}\n        isDisabled={purchased}\n      >\n        +\n      </CustomButton>\n      <CustomButton\n        btnClass={'btn-secondary btn-circle increase-decrease-btn'}\n        onClickCallback={handleDecrementItemBtnClick}\n        itemID={id}\n        btnClassDisabled={purchased ? 'btn-disabled' : ''}\n        isDisabled={purchased}\n      >\n        -\n      </CustomButton>\n    </div>\n  </li>\n);\n\nexport default GroceryItem;\n","import React from 'react';\nimport GroceryItem from '../grocery-item/grocery-item.component';\nimport './grocery-items-container.styles.css';\n\nconst GroceryItemsContainer = ({\n  groceryItems,\n  handleDecrementItemBtnClick,\n  handleIncrementItemBtnClick,\n  onClickTogglePurchaseStatus\n}) => {\n  return (\n    <ul className=\"grocery-items-container\">\n      {groceryItems.map((item, key) => (\n        <GroceryItem\n          key={key}\n          id={item.id}\n          name={item.name}\n          quantity={item.quantity}\n          purchased={item.purchased}\n          handleIncrementItemBtnClick={handleIncrementItemBtnClick}\n          handleDecrementItemBtnClick={handleDecrementItemBtnClick}\n          togglePurchaseCallback={onClickTogglePurchaseStatus}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default GroceryItemsContainer;\n","import React from 'react';\nimport './custom-input-field.styles.css';\n\nconst CustomInputField = ({ onChangeCallback, ...props }) => (\n  <input\n    className=\"input-field\"\n    type={props.type}\n    name={props.name}\n    placeholder={props.placeholder}\n    value={props.inputFieldValue}\n    onChange={event => onChangeCallback(event.target.value)}\n  />\n);\n\nexport default CustomInputField;\n","import React from 'react';\nimport CustomButton from '../custom-button/custom-button.component';\nimport CustomInputField from '../custom-input-field/custom-input-field.component';\nimport './add-new-item-container.styles.css';\n\nconst AddNewItemContainer = ({\n  handleAddItemBtnClick,\n  onChangeItemInputField,\n  inputFieldValue\n}) => (\n  <div className=\"add-new-item-form\">\n    <label className=\"form-label\">Add new items to list</label>\n    <div style={{ display: 'flex' }}>\n      <CustomInputField\n        type={'text'}\n        name={'new-grocery-item'}\n        placeholder={'Wheat, Pulses, Maggie ...'}\n        onChangeCallback={onChangeItemInputField}\n        inputFieldValue={inputFieldValue}\n      />\n      <CustomButton btnClass={'btn-primary'} onClickCallback={handleAddItemBtnClick}>\n        Add\n      </CustomButton>\n    </div>\n  </div>\n);\n\nexport default AddNewItemContainer;\n","import React, { Component } from 'react';\nimport GroceryItemsContainer from '../../components/grocery-items-container/grocery-items-container.component';\nimport AddNewItemContainer from '../../components/add-new-item-container/add-new-item-container.component';\nimport CustomButton from '../../components/custom-button/custom-button.component';\nimport './homepage.styles.css';\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      groceryItems: [\n        { id: '_l4wnop', name: 'Wheat', quantity: 1, purchased: false },\n        { id: '_l4wsy2', name: 'Toor Dal', quantity: 2, purchased: false }\n      ],\n      newItem: { name: '', quantity: 1 }\n    };\n\n    this.onChangeItemInputField = this.onChangeItemInputField.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.clearAllItems = this.clearAllItems.bind(this);\n    this.increaseQuantity = this.increaseQuantity.bind(this);\n    this.decreaseQuantity = this.decreaseQuantity.bind(this);\n    this.togglePurchaseStatus = this.togglePurchaseStatus.bind(this);\n  }\n\n  generateID() {\n    return (\n      '_' +\n      Math.random()\n        .toString(36)\n        .substr(2, 6)\n    );\n  }\n\n  addItem() {\n    console.log('new item added');\n    const currentItems = this.state.groceryItems;\n    const newItemName = this.state.newItem.name;\n    const newItemQuantity = this.state.newItem.quantity;\n\n    if (newItemName !== '') {\n      if (currentItems.some(item => item.name.toLowerCase() === newItemName.toLowerCase())) {\n        currentItems.forEach(item => {\n          if (item.name.toLowerCase() === newItemName.toLowerCase()) item.quantity += 1;\n        });\n      } else {\n        currentItems.push({\n          id: this.generateID(),\n          name: newItemName,\n          quantity: newItemQuantity,\n          purchased: false\n        });\n      }\n      this.setState({ groceryItems: currentItems });\n      this.setState({\n        newItem: {\n          name: '',\n          quantity: 1\n        }\n      });\n    }\n  }\n\n  clearAllItems() {\n    console.log('All items cleared');\n    this.setState({ groceryItems: [] });\n  }\n\n  togglePurchaseStatus(event) {\n    const itemID = event.target.getAttribute('data-item-id');\n    const currentItems = this.state.groceryItems;\n    currentItems.forEach(item => {\n      if (item.id === itemID) {\n        item.purchased = !item.purchased;\n      }\n    });\n\n    this.setState({ groceryItems: currentItems });\n  }\n\n  increaseQuantity(event) {\n    const itemID = event.target.getAttribute('data-item-id');\n    const currentItems = this.state.groceryItems;\n\n    currentItems.forEach(item => {\n      if (item.id === itemID && !item.purchased) item.quantity += 1;\n    });\n\n    this.setState({ groceryItems: currentItems });\n  }\n\n  decreaseQuantity(event) {\n    const itemID = event.target.getAttribute('data-item-id');\n    let currentItems = this.state.groceryItems;\n    currentItems.forEach(item => {\n      if (item.id === itemID && !item.purchased) {\n        item.quantity -= 1;\n\n        if (item.quantity === 0) {\n          currentItems = this.removeItem(currentItems, itemID);\n        }\n      }\n    });\n\n    this.setState({ groceryItems: currentItems });\n  }\n\n  removeItem(currentItems, itemID) {\n    console.log('removed');\n    return currentItems.filter(item => item.id !== itemID);\n  }\n\n  onChangeItemInputField(inputText) {\n    this.setState(state => {\n      return {\n        newItem: {\n          name: inputText,\n          quantity: state.newItem.quantity\n        }\n      };\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <h3 className=\"page-title\">Grocery List</h3>\n\n        <AddNewItemContainer\n          handleAddItemBtnClick={this.addItem}\n          onChangeItemInputField={this.onChangeItemInputField}\n          inputFieldValue={this.state.newItem.name}\n        />\n        <GroceryItemsContainer\n          groceryItems={this.state.groceryItems}\n          handleIncrementItemBtnClick={this.increaseQuantity}\n          handleDecrementItemBtnClick={this.decreaseQuantity}\n          onClickTogglePurchaseStatus={this.togglePurchaseStatus}\n        />\n        <CustomButton btnClass={'btn-danger-outline'} onClickCallback={this.clearAllItems}>\n          Clear List\n        </CustomButton>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React from 'react';\nimport HomePage from './pages/homepage/homepage.component';\nimport './App.css';\n\nfunction App() {\n  return <HomePage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}